package cn.cenjp.platform.controller;import cn.cenjp.platform.Prefix.CountPrefix;import cn.cenjp.platform.bean.Good;import cn.cenjp.platform.bean.SpikeGoods;import cn.cenjp.platform.bean.User;import cn.cenjp.platform.redis.RedisService;import cn.cenjp.platform.service.SendSpikeService;import cn.cenjp.platform.utils.GetDate;import cn.cenjp.platform.utils.MethodUtil;import cn.cenjp.platform.vo.GoodVo;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.util.ClassUtils;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.OutputStream;import java.util.List;/** * 发布秒杀 */@Controllerpublic class sendSpikeController {    @Value("${picture.Location}")    String pictureLocation;    @Autowired    SendSpikeService sendSpikeService;    @Autowired    RedisService redisService;    @RequestMapping("/getSendSpike")    public  String getSendSpike(Model model,User user){        model.addAttribute("userName",user.getUser_name());        model.addAttribute("user", user);        return "sendSpike";    }    @RequestMapping("/sendSpike")    @ResponseBody    public Integer uploadFile(String goodName, Double spikePrice, String goodIntroduction ,                             String goodOriginalPrice, String spikeStartTime, String spikeEndTime ,                             String spikeCount, String goodKind, MultipartFile file, Model model, User user){        String fileName = file.getOriginalFilename();        File dest = new File(pictureLocation + fileName);        model.addAttribute("userName",user.getUser_name());        model.addAttribute("user", user);        Good good = MethodUtil.getGood(goodName,goodIntroduction, goodOriginalPrice,goodKind,fileName);        SpikeGoods spikeGood = MethodUtil.getSpikeGood(spikePrice, spikeStartTime, spikeEndTime, spikeCount, good, user.getUser_id(),fileName);        boolean flag = sendSpikeService.sendSpike(good, spikeGood);        //更新发布的商品的数量        if (flag){            redisService.incrAll(CountPrefix.sendCountPrefix, GetDate.getDate());            if(!dest.getParentFile().exists()){ //判断文件父目录是否存在                dest.getParentFile().mkdir();            }            System.out.println(dest.getPath());            try {                file.transferTo(dest); //保存文件            } catch (IllegalStateException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            }        }        return flag==true?1:0;    }    @RequestMapping(value = "/getPicture")    @ResponseBody    public String getPicture(@RequestParam("name") String picName,                             HttpServletResponse response, Model model) {        FileInputStream fis = null;        OutputStream os = null;        System.out.println(picName);        try {            fis = new FileInputStream(pictureLocation+picName);            os = response.getOutputStream();            int count = 0;            byte[] buffer = new byte[1024 * 8];            while ((count = fis.read(buffer)) != -1) {                os.write(buffer, 0, count);                os.flush();            }        } catch (Exception e) {            e.printStackTrace();        }        try {            fis.close();            os.close();        } catch (IOException e) {            e.printStackTrace();        }        return "ok";    }    @RequestMapping("/getMySend")    public String getSend(User user, Model model){        model.addAttribute("userName",user.getUser_name());        model.addAttribute("user", user);        List<GoodVo> send = sendSpikeService.getSend(String.valueOf(user.getUser_id()));        model.addAttribute("spikeGood",send);        return "mySend";    }}