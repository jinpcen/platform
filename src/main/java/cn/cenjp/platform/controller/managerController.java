package cn.cenjp.platform.controller;import cn.cenjp.platform.bean.Role;import cn.cenjp.platform.bean.User;import cn.cenjp.platform.service.ManagerService;import cn.cenjp.platform.service.RoleService;import cn.cenjp.platform.service.UserService;import cn.cenjp.platform.vo.SearchUser;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import java.util.List;@Controllerpublic class managerController {    @Autowired    ManagerService managerService;    @Autowired    UserService userService;    @Autowired    RoleService roleService;    @RequestMapping("/adminIndex")    @PreAuthorize("hasRole('ROLE_ADMIN')")    public String adminIndex(Model model){        managerService.getInfo(model);        return "admin/adminIndex";    }    @RequestMapping("/adminInfo")    @PreAuthorize("hasRole('ROLE_ADMIN')")    public String adminInfo(User user,Model model){        model.addAttribute("user",user);        return "admin/adminInfo";    }    @RequestMapping("/member-del")    @PreAuthorize("hasRole('ROLE_ADMIN')")    public String memberDel(){        return "admin/member-del";    }    @RequestMapping("/member-list")    public String memberList(){        return "admin/member-list";    }    @RequestMapping("/adGetUser")    @PreAuthorize("hasRole('ROLE_ADMIN')")    @ResponseBody    public SearchUser adGetUser(@RequestParam("phone")String phone){        SearchUser searchUser = new SearchUser();        User user = userService.getUserByPhone(phone);        user.setUser_password(null);        if (user==null) searchUser.setCode("500214");        else {            searchUser.setCode("200");            searchUser.setUser(user);            List<Role> roles = roleService.getRole(user.getUser_id());            boolean isLive = roles.stream().map(v -> v.getRole_name()).anyMatch(name -> "ROLE_USER".equals(name));            if (isLive)                searchUser.setStatus(1);            else searchUser.setStatus(0);        }        return searchUser;    }    @RequestMapping("/memberStop")    @PreAuthorize("hasRole('ROLE_ADMIN')")    @ResponseBody    public Integer memberStop(@RequestParam("userId") String userId){        boolean role_user = roleService.delteRole(userId, "ROLE_USER");        return role_user==true?1:0;    }    @RequestMapping("/memberLive")    @PreAuthorize("hasRole('ROLE_ADMIN')")    @ResponseBody    public Integer memberLive(@RequestParam("userId") String userId){        boolean role_user = roleService.insertRole(userId,"ROLE_USER");        return role_user==true?1:0;    }    @RequestMapping("/getUserDel")    @PreAuthorize("hasRole('ROLE_ADMIN')")    @ResponseBody    public SearchUser getUserDel(@RequestParam("phone")String phone){        SearchUser searchUser = new SearchUser();        User user = userService.getUserByPhone(phone);        user.setUser_password(null);        if (user==null) searchUser.setCode("500214");        else {            searchUser.setCode("200");            searchUser.setUser(user);            List<Role> roles = roleService.getRole(user.getUser_id());            boolean isLive = roles.stream().map(v -> v.getRole_name()).anyMatch(name -> "ROLE_VIP".equals(name));            if (isLive)                searchUser.setStatus(1);            else searchUser.setStatus(0);        }        return searchUser;    }    @RequestMapping("/RoleStop")    @PreAuthorize("hasRole('ROLE_ADMIN')")    @ResponseBody    public Integer RoleStop(@RequestParam("userId") String userId){        boolean role_user = roleService.delteRole(userId, "ROLE_VIP");        return role_user==true?1:0;    }    @RequestMapping("/RoleLive")    @PreAuthorize("hasRole('ROLE_ADMIN')")    @ResponseBody    public Integer RoleLive(@RequestParam("userId") String userId){        System.out.println("userID-------------"+userId);        boolean role_user = roleService.insertRole(userId,"ROLE_VIP");        return role_user==true?1:0;    }}